version: "3.8"

networks:
  bookshop:
    driver: bridge

services:

  # Backing Services

  gateway-redis:
    image: "redis:7.0"
    container_name: "gateway-redis"
    ports:
      - 6380:6380
    networks:
      - bookshop

  keycloak-postgres:
    image: postgres:15.3
    container_name: keycloak_postgres
    ports:
      - "5433:5433"
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=keycloak
      - POSTGRES_PASSWORD=password
    healthcheck:
      test: "pg_isready -U postgres"
    networks:
      - bookshop

  bookshop-keycloak:
    image: quay.io/keycloak/keycloak:22.0.1
    container_name: bookshop-keycloak
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_DB=postgres
      - KC_DB_URL_HOST=keycloak-postgres
      - KC_DB_URL_DATABASE=keycloak
      - KC_DB_USERNAME=keycloak
      - KC_DB_PASSWORD=password
      - KC_DB_PORT=5433
      - KC_HEALTH_ENABLED=true
    ports:
      - "8080:8080"
    command: start-dev
    depends_on:
      - keycloak-postgres
    healthcheck:
      test: "curl -f http://bookshop-keycloak:8080/health/ready || exit 1"
    networks:
      - bookshop

  mysql:
    image: mysql:8.1.0
    container_name: mysql
    restart: unless-stopped
    ports:
      - "3306:3306"
#    environment:
#      - MYSQL_ROOT_PASSWORD=test1234!
#      - MYSQL_DATABASE=reactlibrarydatabase
    volumes:
      - ./mysql/01-create-user.sql:/docker-entrypoint-initdb.d/01-create-user.sql
      - ./mysql/02-create-products.sql:/docker-entrypoint-initdb.d/02-create-products.sql
      - ./mysql/03-countries-and-states.sql:/docker-entrypoint-initdb.d/03-countries-and-states.sql
      - ./mysql/04-create-order-tables.sql:/docker-entrypoint-initdb.d/04-create-order-tables.sql
    healthcheck:
      test: "mysqladmin ping -u root -p$${MYSQL_ROOT_PASSWORD}"
    networks:
      - bookshop

  redis:
    image: redis:6.2.4
    ports:
      - "6379:6379"
    restart: on-failure
    environment:
      REDIS_PASSWORD: pass
    networks:
      - bookshop

  zipkin:
    image: openzipkin/zipkin:2.24.3
    container_name: zipkin
    restart: unless-stopped
    ports:
      - "9411:9411"
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9411" ]
    networks:
      - bookshop



  minio:
    image: minio/minio:RELEASE.2022-06-20T23-13-45Z
    restart: always
    environment:
      MINIO_ACCESS_KEY: mystorage
      MINIO_SECRET_KEY: mystorage
      MINIO_REGION: eu-east
    ports:
      - "8086:8087"
    volumes:
      - ./minio:/data
    command: server --address ":8086" --console-address ":8087" /data
    networks:
      - bookshop

  createbuckets:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio:8086 mystorage mystorage;
      /usr/bin/mc rm -r --force myminio/catalog-images;
      /usr/bin/mc mb myminio/catalog-images;
      /usr/bin/mc policy download myminio/catalog-images;
      exit 0;
      "
    networks:
      - bookshop

  imgproxy:
    image: darthsim/imgproxy:v3.6
    restart: always

    environment:
      IMGPROXY_ALLOW_ORIGIN: '*'
      IMGPROXY_LOCAL_FILESYSTEM_ROOT: /opt # you can link Minio volume to imgproxy and use as a local filesystem.
      IMGPROXY_USE_S3: 'true'
      IMGPROXY_S3_ENDPOINT: http://minio:8086
      AWS_ACCESS_KEY_ID: mystorage
      AWS_SECRET_ACCESS_KEY: mystorage
      AWS_REGION: eu-east
      SERVER_PORT: 8887
    links:
      - minio
    ports:
      - "8887:8080"
    volumes:
      - "./minio:/opt" # link to minio volume to imgproxy's /opt folder for local filesystem.
    networks:
      - bookshop